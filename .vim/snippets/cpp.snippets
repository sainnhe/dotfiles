snippet nodet node structure used in tree
	struct ${1:TreeNode} {
		${2:int} ${3:val};
		${1:TreeNode} *${4:left};
		${1:TreeNode} *${5:right};
		${1:TreeNode}() : ${3:val}(${6:0}), ${4:left}(${7:nullptr}), ${5:right}(${8:nullptr}) {}
		${1:TreeNode}(${2:int} ${3:val}) : ${3:val}(${3:val}), ${4:left}(${7:nullptr}), ${5:right}(${8:nullptr}) {}
		${1:TreeNode}(${2:int} ${3:val}, ${1:TreeNode} *${4:left}, ${1:TreeNode} *${5:right}) : ${3:val}(${3:val}), ${4:left}(${4:left}), ${5:right}(${5:right}) {}
	};${0:}

snippet nodel node structure used in linked list
	struct ${1:ListNode} {
		${2:int} ${3:val};
		${1:ListNode} *${4:next};
		${1:ListNode}() : ${3:val}(${5:0}), ${4:next}(${6:nullptr}) {}
		${1:ListNode}(${2:int} ${3:val}) : ${3:val}(${3:val}), ${4:next}(${6:nullptr}) {}
		${1:ListNode}(${2:int} ${3:val}, ${1:ListNode} *${4:next}) : ${3:val}(${3:val}), ${4:next}(${4:next}) {}
	};

snippet sorti insert sort
	void ${1:insertSort}(std::vector<int> &v) {
		int len = v.size();
		if (len == 1) return;
		// 有序区 [0...i]，无序区 [i+1...len-1]
		for (int i = 0; i < len - 1; ++i) {
			// 找到 v[i+1] 在有序区中的位置
			// 从后往前遍历有序区
			int j = i;
			while (v[i + 1] < v[j]) {
				--j;
			}
			// v[i+1] 应该插入到 v[j+1] 的位置
			// 先把原本的 v[j+1...i] 往后挪一位
			int tmp = v[i + 1];
			for (int x = i; j + 1 <= x; --x) {
				v[x + 1] = v[x];
			}
			// 插入 v[i+1]
			v[j + 1] = tmp;
		}
	}

snippet sortb bubble sort
	void ${1:bubbleSort}(std::vector<int> &v) {
		int len = v.size();
		if (len == 1) return;
		// 无序区 [0...i]，有序区 [i+1...len-1]
		for (int i = len - 1; i >= 0; --i) {
			// 从前往后遍历无序区
			for (int j = 0; j < i; ++j) {
				// 对比相邻的两个元素，把大的那个往后移
				if (v[j] > v[j + 1]) {
					v[j] = v[j] ^ v[j + 1];
					v[j + 1] = v[j] ^ v[j + 1];
					v[j] = v[j] ^ v[j + 1];
				}
			}
		}
	}

snippet sorts selection sort
	void ${1:selectionSort}(std::vector<int> &v) {
		int len = v.size();
		if (len == 1) return;
	
		int maxIndex = 0;
		int tmp = v[0];
	
		// 无序区 [0...i]，有序区 [i+1...len-1]
		for (int i = len - 1; i >= 0; --i) {
			maxIndex = 0;
			// 从前往后遍历无序区
			for (int j = 0; j <= i; ++j) {
				// 找到最大值的索引
				if (v[j] > v[maxIndex]) maxIndex = j;
			}
			// 交换最大值和无序区末尾元素
			tmp = v[i];
			v[i] = v[maxIndex];
			v[maxIndex] = tmp;
		}
	}

snippet sortq quick sort
	void ${1:quickSort}(std::vector<int> &v, int left, int right) {
		if (left >= right) return;
		int pivot = v[left];
		int tmp = 0;
		// 双指针
		// i = left 从左到右
		// j = right 从右到左
		int i = left;
		int j = right;
		while (i < j) {
			// 移动 j
			// 从右往左找到第一个比 pivot 小的 v[j]
			// 此时 v[j+1...k] 都比 pivot 大
			while (i < j && v[j] >= pivot) --j;
			// 把这个数覆盖到左侧 v[i]
			if (i < j) {
				v[i] = v[j];
				++i;
			}
			// 移动 i
			// 从左往右找到第一个比 pivot 大的 v[i]
			// 此时 v[0...i-1] 都比 pivot 小
			while (i < j && v[i] <= pivot) ++i;
			// 把这个数覆盖到右侧 v[j]
			if (i < j) {
				v[j] = v[i];
				--j;
			}
		}
		// 出循环后 i == j
		// 此时左侧和右侧都已经处理完毕
		// 接下来把 pivot 放到 v[i] 即可
		v[i] = pivot;
		// 递归处理左侧
		${1:quickSort}(v, left, i - 1);
		// 递归处理右侧
		${1:quickSort}(v, i + 1, right);
	}

snippet binsearch bin search
	int ${1:binSearch}(std::vector<int> &nums, int target) {
		int left = 0;
		int right = nums.size() - 1; // 定义target在左闭右闭的区间里，[left, right]
		while (left <= right) { // 当left==right，区间[left, right]依然有效，所以用 <=
			int middle = left + ((right - left) / 2); // 防止溢出 等同于(left + right)/2
			if (nums[middle] > target) {
				right = middle - 1; // target 在左区间，所以[left, middle - 1]
			} else if (nums[middle] < target) {
				left = middle + 1; // target 在右区间，所以[middle + 1, right]
			} else { // nums[middle] == target
				return middle; // 数组中找到目标值，直接返回下标
			}
		}
		// 未找到目标值
		return -1;
	}

snippet kmp KMP
	// 构造字符串 s 的前缀表
	// 在 getNext() 函数中，我们假设 s.length() >= 2
	void getNext(int* next, const string& s) {
		// j 有两重含义：
		// 1. 前缀的末尾下标
		// 2. 最长相同前后缀的长度
		// i 的含义是后缀的末尾下标
		// 初始化 j 为 0
		int j{0};
		// next[0] 很显然一定是为 0 的
		next[0] = 0;
		// 开始迭代
		// 我们的目标是在每次迭代的过程中，找到最长相同前后缀
		// s[0...j] == s[?...i]
		// i 从 1 开始迭代，因为 length >= 2 ，我们没必要讨论
		// i == 0 的情况
		int len = s.size();
		for (int i{1}; i < len; ++i) {
			// 当 s[j] 和 s[i] 不想等时，即前后缀不匹配的时候
			// 前缀末尾的下标 j 需要进行回退
			// a a a f a a a f
			//             j i
			// 回退到什么位置呢？
			// 注意观察，s[j] 和 s[i] 虽然不想等，但是前面这一段
			// aaafaaa 有着公共前后缀 aaa ，所以我们可以试着跳到
			// 前缀 aaa 的后面那个元素的位置 f，然后比较前缀 aaaf
			// 和后缀 aaaf 是否相同。
			// a a a f a a a f
			//             j i
			//       j       i
			// 由于前缀和后缀都有着公共的 aaa ，所以我们只需要比较
			// s[j] 和 s[i] 是否相同就行了。
			// 如果不相同，继续回退，直到 j 回退到起始位置 0。
			// 怎么把 j 跳到 f 的位置呢？f 在 aaa 的后面，aaa 是
			// aaafaaa 的最长公共前缀，所以 f 的下标就是 next[j - 1]
			while (j > 0 && s[i] != s[j]) {
				j = next[j - 1];
			}
			// 接下来处理当 s[j] == s[i] 的情况
			// 这种情况很简单，就是公共前后缀的长度增加了 1
			// 而由于 for 语句中的 ++i 使得后缀末尾 i 已经自增了 1
			// 我们只需要再让前缀末尾 j 自增 1 即可
			if (s[i] == s[j]) {
				++j;
			}
			// 两种情况都处理完了，接下来更新 next[i]
			// 由于我们之前让 j 自增了 1，所以其实现在的情况是
			// 前缀 [0, j - 1] 和 后缀 [?, i] 相同
			// 然而 next[i] 是指最长公共前后缀的长度，因此长度可以用
			// j 来描述。
			next[i] = j;
		}
	}

	int strStr(string haystack, string needle) {
		int haystackLen = haystack.size();
		int needleLen = needle.size();
		if (needleLen == 0) {
			return 0;
		}
		// 开始创建 needle 的前缀表
		int next[needleLen];
		getNext(next, needle);
		// j 用来索引 needle ，它有两层含义
		// 1. 前缀的末尾下标
		// 2. 最长相同前后缀的长度
		int j = 0;
		// 开始迭代
		// 接下来的操作和 getNext() 中的迭代非常相似
		// 不过注意，现在 i 从 0 开始迭代，之所以不像 getNext()
		// 中那样从 1 开始迭代是因为 getNext() 不需要考虑 i == 0
		for (int i{0}; i < haystackLen; ++i) {
			// 首先讨论末尾不匹配的情况，我们需要回退 j
			while (j > 0 && needle[j] != haystack[i]) {
				j = next[j - 1];
			}
			// 接下来处理末尾相同的情况，那好说，直接往前推
			if (needle[j] == haystack[i]) {
				++j;
			}
			// 成功找到匹配字符串，返回
			if (j == needleLen) {
				return i - needleLen + 1;
			}
		}
		return -1;
	}

snippet queuem monotonic queue
	#include <deque>

	class MyQueue {
		public:
		std::deque<int> que;

		void pop(int value) {
			// 只有当要弹出的元素等于队首时，才会弹出
			// 这样做没问题吗？
			// 没问题，因为我们只关注队首元素是不是最大的，只要我们想弹出的元素不是队首元素，那就可以不用管
			if (value == que.front() && !que.empty()) {
				que.pop_front();
			}
		}

		void push(int value) {
			// 当我们要插入的元素比队尾元素大时，就一直弹出队尾元素，直到小于等于队尾元素为止
			// 这样做没问题吗？
			// 没问题，因为我们只关注队首元素是不是最大的，其它元素要不要都无所谓。
			while (value > que.back() && !que.empty()) {
				que.pop_back();
			}
			que.push_back(value);
		}

		int front(void) { return que.front(); }
	};

snippet dfs depth first search
	vector<int> inorderTraversal(TreeNode* root) {
		// 初始化结果集
		vector<int> result;
		// 初始化栈
		stack<TreeNode*> st;
		// 当根节点不为空时将根节点入栈
		if (root != NULL) st.push(root);
		// 当栈为空时停止迭代
		while (!st.empty()) {
			// 先获取栈顶元素
			TreeNode* node = st.top();
			// 栈顶元素出栈
			st.pop();
			// 如果栈顶元素不为空指针，则将节点按顺序入栈
			if (node != NULL) {
				// 注意是右中左，和左中右反着，因为栈是先进后出
				// 右
				if (node->right) st.push(node->right);
				// 中
				st.push(node);
				st.push(NULL);
				// 左
				if (node->left) st.push(node->left);
			} else {  // 只有遇到空节点的时候，才将下一个节点放进结果集
				node = st.top();  // 重新取出栈中元素
				st.pop();
				result.push_back(node->val);  // 加入到结果集
			}
		}
		return result;
	}

snippet bfs breadth first search
	vector<vector<int>> iter(Node *root) {
		// 讨论边界条件
		if (root == nullptr) {
			return;
		}
		// 初始化一个队列
		std::queue<Node *> queue;
		// 初始化结果向量
		vector<vector<int>> result;
		// 把根节点放进去
		if (root) queue.push(root);
		// 开始迭代，当队列为空时结束迭代
		while (!queue.empty()) {
			// 获得当前层的节点个数
			int size = queue.size();
			// 创建一个向量用来装当前层的结果
			vector<int> vec;
			// 开始迭代当前层
			for (int i{0}; i < size; ++i) {
				// 取队首
				Node *node = queue.front();
				// 弹出队首
				queue.pop();
				// 将队首的值放进向量中
				vec.push_back(node->val);
				// 遍历队首的所有子节点并把它们放到队尾
				if (node->left) queue.push(node->left);
				if (node->right) queue.push(node->right);
			}
			result.push_back(vec);
		}
		return result;
	}

snippet trackback trackback
	void backtrack(NodeState &node, vector<NodeState> &result, int para1, int para2, int para3) {
		// 终止条件
		// 回溯法中的每个节点并不是真的树状节点，没有 `nullptr` ，因此用空指针来判断是否到了叶子结点并不合理，需要其它的一些方法来确定是否到达叶子节点，比如高度。
		if (/* end condition */) {
			/* update result */
			return;
		}

		// 剪枝
		// 当现在的节点不可能出现我们想要的结果时，直接跳过。
		if (/* out of scope */) {
			return;
		}

		// 遍历该节点的所有子节点，即遍历下一层
		for (...) {
			// 剪枝也可以在 for 循环中完成
			if (/* out of scope */) {
				continue;
			}
			// 处理节点
			// 现在 node 中的数据描述的是当前节点，
			// handle(node) 一般是让 node 中的数据变成子节点的数据
			handle(node);
			// 递归
			backtrack(node, result, para1, para2, para3);
			// 撤销数据处理，让 node 中的数据再次变回描述当前节点的数据
			revert(node);
		}
	}

# C Snippets

snippet main main() function
	int main(int argc, const char *argv[]) {
		${0:/*statements*/}
		return 0;
	}

snippet mainv main() function that accepts no parameters
	int main(void) {
		${0:/*statements*/}
		return 0;
	}

snippet while while loop
	while (${1:/*condition*/}) {
		${0:/*statements*/}
	}

snippet do_while do...while loop
	do {
		${0:/*statements*/}
	} (${1:/*condition*/})

snippet for for loop
	for(${1:/*initialization*/}; ${2:/*condition*/}; ${3:/*increment/decrement*/}) {
		${0:/*statements*/}
	}

snippet fori for loop using index
	for(int ${1:i} = 0; ${1:i} ${2:< 10}; ${1:i}++) {
		${0:/*statements*/}
	}

snippet if if statement
	if (${1:/*condition*/}) {
		${0:/*statements*/}
	}

snippet elseif else if statement
	else if (${1:/*condition*/}) {
		${0:/*statements*/}
	}

snippet else else statement
	else {
		${0:/*statements*/}
	}

snippet ifelse if...else statement
	if (${1:/*condition*/}) {
		${2:/*statements*/}
	} else {
		${3:/*statements*/}
	}

snippet switch switch statement
	switch (${1:/*variable*/}) {
		case ${2:/*variable case*/}:
			${3:/*statements*/}
			${4:break;}${5}
		default:
			${6}
	}

snippet function_definition function definition
	${1:void} ${2:func_name}(${3:void}) {
			${0:/*statements*/}
	}

snippet function_declaration function declaration
	${1:void} ${2:func_name}(${3:void});

snippet ternary ternary
	(${1:/*condition*/}) ? ${2:/*expression true*/} : ${3:/*expression false*/}

snippet return return
	return ${0:${VISUAL}};

snippet header header guards
	#ifndef ${1:MY_PROJECT_SRC_UTILS_MYCLASS_H_}
	#define ${1:MY_PROJECT_SRC_UTILS_MYCLASS_H_}
	
	${0:/* statements */}
	
	#endif
